#!/usr/bin/env node

const fs = require('fs');
const dataDir = 'data';
const Table = require('cli-table');
const Fuse = require('fuse.js');
const moment = require('moment');

const defaultTableOptions = {
    chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''}
};

const emailAlias = {
    'hoelt@fovea.cc': 'JC',
};

const fieldToText = (object, field) =>
    ['date', 'created', 'upgraded'].indexOf(field) >= 0
        ? (object[field] && moment(new Date(object[field])).fromNow() || '')
        : field === 'from'
        ? emailAlias[object[field]] || object[field].split('@')[0]
        : (object[field] || '');

// const loadData = () =>
//     fs.readdirSync(dataDir).map((file) => require('./' + dataDir + '/' + file));

const loadData = () => require('./data.json');
const saveData = (data) => {
    fs.copyFileSync('./data.json', './data.json.bak');
    fs.writeFileSync('./data.json', JSON.stringify(data, null, 4));
};

// Reports
const companies = (data, filter, delColumns) => {
    const columns = ['name', 'url', 'address'];
    const displayColumns = columns.filter((c) => !delColumns || delColumns.indexOf(c) < 0);
    let out = data.map(x => x);
    if (filter) {
        const fuse = new Fuse(out, {
            keys: columns,
            matchAllTokens: true,
            threshold: 0.1,
            location: 0,
            distance: 100,
            findAllMatches: true,
        });
        out = fuse.search(filter);
    }
    out.printAsText = () => {
        const table = new Table(Object.assign(
            {head: displayColumns},
            defaultTableOptions));
        out.forEach((company) =>
            table.push(displayColumns.map(cname => fieldToText(company, cname))));
        console.log(table.toString());
    };
    return out;
};

const about = (data, filter, delColumns) => {
    let out = [];
    const columns = ['company', 'role', 'email'];
    const displayColumns = columns.filter((c) => !delColumns || delColumns.indexOf(c) < 0);
    data.forEach((company) => {
        company.contacts.forEach((c) => {
            const name = `${c.firstName} ${c.lastName}`.replace(/(^ )|( $)/g, '');
            out.push({
                company: company.name,
                role: c.role,
                email: `${name} <${c.email}>`
            });
        });
    });
    if (filter) {
        const fuse = new Fuse(out, {
            keys: columns,
            matchAllTokens: true,
            threshold: 0.1,
            location: 0,
            distance: 100,
            findAllMatches: true,
        });
        out = fuse.search(filter);
    }

    out.printAsText = () => {

        const table = new Table( Object.assign(
            {head: displayColumns},
            defaultTableOptions));
        const companies = {};
        out.forEach((line) => {
            companies[line.company] = true;
            table.push(displayColumns.map(cname => fieldToText(line, cname)));
        });
        console.log('\nContacts:');
        console.log(table.toString());
        Object.keys(companies).forEach((company) => {
            console.log(`\nApps from ${company}:`);
            apps(data, company, ['company']).printAsText();
            console.log(`\nInteractions with ${company}:`);
            interactions(data, company, ['company']).printAsText();
        });
    };
    return out;
};


const contacts = (data, filter, delColumns) => {
    let out = [];
    const columns = ['company', 'role', 'email'];
    const displayColumns = columns.filter((c) => !delColumns || delColumns.indexOf(c) < 0);
    data.forEach((company) => {
        company.contacts.forEach((c) => {
            const name = `${c.firstName} ${c.lastName}`.replace(/(^ )|( $)/g, '');
            out.push({
                company: company.name,
                role: c.role,
                email: `${name} <${c.email}>`,
            });
        });
    });
    if (filter) {
        const fuse = new Fuse(out, {
            keys: columns,
            matchAllTokens: true,
            threshold: 0.1,
            location: 0,
            distance: 100,
            findAllMatches: true,
        });
        out = fuse.search(filter);
    }

    out.printAsText = () => {
        const table = new Table( Object.assign(
            {head: displayColumns},
            defaultTableOptions));
        out.forEach((line) =>
            table.push(displayColumns.map(cname => fieldToText(line, cname))));
        console.log(table.toString());
    };
    return out;
};

const apps = (data, filter, delColumns) => {
    let out = [];
    const columns = ['company', 'plan', 'created', 'upgraded', 'name', 'email'];
    const displayColumns = columns.filter((c) => !delColumns || delColumns.indexOf(c) < 0);
    data.forEach((company) => {
        company.apps.forEach((app) => {
            out.push({
                company: company.name,
                created: app.createdAt,
                upgraded: app.upgradedAt,
                email: app.email,
                name: app.appName,
                plan: app.plan,
            });
        });
    });
    if (filter) {
        const fuse = new Fuse(out, {
            keys: columns,
            matchAllTokens: true,
            threshold: 0.1,
            location: 0,
            distance: 100,
            findAllMatches: true,
        });
        out = fuse.search(filter);
    }
    out = out.sort((a, b) => (+new Date(a.date)) - (+new Date(b.date)));

    out.printAsText = () => {
        const table = new Table( Object.assign(
            {head: displayColumns},
            defaultTableOptions));
        out.forEach((line) =>
            table.push(displayColumns.map(cname => fieldToText(line, cname))));
        console.log(table.toString());
    };
    return out;
};

const interactions = (data, filter, delColumns) => {
    let out = [];
    const columns = ['company', 'kind', 'date', 'from', 'summary', 'fupb4'];
    const displayColumns = columns.filter((c) => !delColumns || delColumns.indexOf(c) < 0);
    data.forEach((company) => {
        company.apps.forEach((app) => {
            out.push({
                company: company.name,
                kind: 'system',
                date: app.createdAt || '',
                from: app.email,
                summary: `Registered ${app.appName}`,
                fupb4: '',
            });
            if (app.upgradedAt) {
                out.push({
                    company: company.name,
                    kind: 'system',
                    date: app.upgradedAt || '',
                    from: app.email,
                    summary: `Upgraded ${app.appName} to ${app.plan}`,
                    fupb4: '',
                });
            }
        });
        company.interactions.forEach((interaction) => {
            out.push({
                company: company.name,
                kind: interaction.kind || '',
                date: interaction.date || '',
                from: interaction.from,
                summary: interaction.summary,
                fupb4: interaction.followUpBefore || '',
            });
        });
    });
    if (filter) {
        const fuse = new Fuse(out, {
            keys: columns,
            matchAllTokens: true,
            threshold: 0.1,
            location: 0,
            distance: 100,
            findAllMatches: true,
        });
        out = fuse.search(filter);
    }
    out = out.sort((a, b) => (+new Date(a.date)) - (+new Date(b.date)));

    out.printAsText = () => {
        const table = new Table( Object.assign(
            {head: displayColumns},
            defaultTableOptions));
        out.forEach((line) =>
            table.push(displayColumns.map(cname => fieldToText(line, cname))));
        console.log(table.toString());
    };
    return out;
};

const readColumns = async (columns) => new Promise((resolve, reject) => {
    const typed = [];
    const object = {};
    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
    });
    const onLine = function (cmd) {
        if (typed.length < columns.length) {
            object[columns[typed.length]] = cmd;
            typed.push(cmd);
        }
        else if (cmd === 'y') {
            // console.log(JSON.stringify(object, null, 2));
            rl.off('line', onLine);
            return resolve(object);
        }
        else if (cmd === 'n') {
            rl.off('line', onLine);
            return reject();
        }

        if (typed.length < columns.length) {
            console.log(columns[typed.length] + ':');
        }
        else {
            console.log(JSON.stringify(object, null, 2));
            console.log('Confirm? (y/n)');
        }
    };
    console.log(columns[typed.length] + ':');
    rl.on('line', onLine);
});

const addCompany = (data, filter) => {
    console.log('Please fill in company details:');
    const company = readColumns(['name', 'address', 'url'])
    .catch(process.exit.bind(process, 1))
    .then(async (company) => {
        // If name is filled and there isn't a company with the given name.
        // Add it and save
        if (company.name && !data.find((c) => c.name.toLowerCase() === company.name.toLowerCase())) {
            company.createdAt = new Date().toISOString();
            company.updatedAt = new Date().toISOString();
            company.contacts = [];
            company.interactions = [];
            company.apps = [];
            data.push(company);
            saveData(data);
            console.log('Company added.');
            companies(data, company.name);
            process.exit(0);
        }
        else {
            console.error(`ERROR: A company with name "${company.name}" already exists.`);
            process.exit(1);
        }
    });
    return {printAsText: () => {}};
};

// Usage

const help = () => {
    console.log(
`usage: crm COMMAND [filter]

Available commands:

 - reports:

    i,interactions ... list of interactions.
    com,companies .... list of companies.
    con,contacts ..... list of contacts.
    a,apps ........... list of apps.
    about ............ all we know about a contact / company.

 - data entry:

    add-company ...... register a new company.

`);
};

const commands = {
    i:interactions,
    int:interactions,
    interactions,
    com:companies,
    companies,
    con:contacts,
    contacts,
    a:apps,
    app:apps,
    apps,
    about,
    'add-company': addCompany,
};

const data = loadData();
const command = commands[process.argv[2]];
if (!command) {
    help();
    process.exit(1);
}
const filter = process.argv.slice(3).join(' ');
const report = command(data, filter);
report.printAsText();
